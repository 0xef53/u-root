This is a docker image that contains working examples of 3 uses of u-root

1. Running in a chroot. To test, cd to /u-root and type README

2. Running as the --kernel switch with initramfs embedded in the bzImage.
   To run this, cd /linux-3.14.17 and type
   sh /u-root/scripts/KERNELKVM
   I recommend you use tmux, and in /dev/pts/0, type
   sleep 4000
   and add --monitor /dev/pts/0 but that's
   your call. If you do so, you'll get a nice qemu prompt.

3. Running as an embedded linux kernel in the coreboot image.
   To try this, cd /coreboot, and type
   sh /u-root/scripts/KVM
   The same recommendations apply as for (2) above.

Just type commands and try things. I've got one 'script' session for
each case in / as well, e.g.
script.coreboot
is some sample interaction with the coreboot example.

You can rebuild any of these from scratch at any point.

If you want to test the tcz command and you can't get to a network, try
/srvfiles -p 80 -d /u-root

(source in /u-root/src/srvfiles/srvfiles.go)
This will serve files as thought they came from tinycore.org. Only bash is there
right now.

Sadly, right now, you need to do it in a certain order.
a. To rebuild the go tree in u-root, just run 'getgo'
b. To rebuild things needed for the linux and coreboot case, do step 1 above.
c. To rebuild things for the kernel and coreboot, run step 1, then 
   cd /
   sh u-root/scripts/mkinitramfs
d. linux? cd /linux-3.14.17 && make bzImage; then you can do (2) above again.
e. coreboot? cd /coreboot && make oldconfig && make; then you can do (3) above.

Questions?
rminnich@gmail.com

Ron

