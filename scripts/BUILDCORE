#!/bin/bash
# Build the tinycore root file system image.
# This script builds an image, including dev nodes, then bundles it into a
# cpio.
# you need to run getgo before running this script.
set -e
# Extract our go toolchain.
mkdir -p Core
rsync -av src Core
mkdir -p Core/go
cd Core/
cpio -id < ../go.cpio
OLDPATH=$PATH
export GOPATH=`pwd`
export GOROOT=$GOROOT/go
PATH=$GOPATH/bin:$GOPATH/buildbin:$GOPATH/go/bin:$PATH
rsync -av ../buildbin .
#
(GOBIN=`pwd`/buildbin go install installcommand)
# until we figure out the trickery to get sh to build dynamically, well ...
#(GOBIN=`pwd`/buildbin go install sh)
PATH=$OLDPATH
mkdir -p  bin tmp etc go/pkg/linux_amd64 tcz dev lib usr/lib
rsync -av /dev/tty* /dev/null /dev/zero dev
set +e
cpio -i -E ../tinycorebase/filelist < ../tinycorebase/corepure64.cpio
set -e
echo nameserver 8.8.8.8 > etc/resolv.conf

#Now we have the filesystem image, let's create the cpio.
(sudo find  . | sudo cpio -H newc -o > /tmp/initramfs.cpio)
cat /tmp/initramfs.cpio | gzip > /tmp/uroot.igz
#(cd Core; sudo mkisofs -l -J -V TC-custom -no-emul-boot -boot-load-size 4 -boot-info-table -b boot/isolinux/isolinux.bin -c boot/isolinux/boot.cat -o ../ur.iso .)


