#!/bin/bash
# This is becoming more of a buildroot script. 
# If it is a one-time thing, do it here.
# The simplest thing is to build a go via
# mount --bind your-go-src /go
# cd /go
# export CGO_ENABLED=0
# cd src && make.bash
# This gives you a go with the right baked-in paths.
# This script assumes you have done that; if not,
# have your arg be the path-to-go

# Also, to further compress things, you can
# cd /go/src/cmd/go
# go install -tags cmd_go_bootstrap
# the go_bootstrap will land in /go/tools/pkg/OS_ARCH as go_bootstrap
# in the long term we'll use this, as it makes u-root workable.
# This shrinks the go command by 50% or so.
# You can later recreate the full command once booted:
# cd /go/src/cmd/go
# go install 

# I can't believe I have to do this.
# There are more compact forms (e.g. {6a,6c,6g,6l} but this
# simple-minded format works with simple shells.
# go/pkg used to contain binaries, and now contains .h files.
# Hence the move to cpio. However, pulling the cpio into a ramfs
# dramatically shortens compile times, so this is good.
(
find $1/go/src
find $1/go/include
find $1/go/VERSION.cache
find $1/go/misc
ls $1/go/pkg/linux_amd64/*.h
find $1/go/bin/go
find $1/go/pkg/tool/linux_amd64/6a
find $1/go/pkg/tool/linux_amd64/6c
find $1/go/pkg/tool/linux_amd64/6g
find $1/go/pkg/tool/linux_amd64/6l
) |
(cpio --no-absolute-filenames -o) > go.cpio

mkdir -p dev etc usr/lib lib64 tmp bin
cp /etc/localtime etc

# yegads, the world has gone insane and we can't always build static.

libs=`ldd /go/bin/go /go/pkg/tool/linux_amd64/*| grep -v ':' | grep -v not.*dynamic | grep -v vdso | sed s/\(.*// | sed s/.*=.// | sort -u`
echo $libs
# gnu tar strips the leading /, cowardly.
tar hcf - $libs | tar xv
sudo rm -f dev/null
sudo mknod dev/null c 1 3
