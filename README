#!/bin/bash
set -e
# This README is also a script you can run to test this idea out.
# This is a root file system all based on Go. 
#
#The only binary is the builder, and 6?. The rest gets
#built dynamically into a ramdisk-mounted /.
#Some tools won't build if you build with CGO_ENABLED=0
#But we don't want to carry along a gcc dependency along with
#everything else.
#
#You can test with chroot.
#built dynamically into a ramdisk-mounted /.
#
# Extract our go toolchain.
mkdir -p go
sudo mount -t tmpfs none go
cpio -id < go.cpio
OLDPATH=$PATH
export GOPATH=`/bin/pwd`
export GOROOT=$GOPATH/go
PATH=$GOPATH/bin:$GOPATH/buildbin:$GOPATH/go/bin:$PATH
GOPATH=$GOPATH:$GOPATH/src/cmds

mkdir -p  bin tmp etc go/pkg/linux_amd64 tcz dev lib usr/lib proc
sudo mount -t tmpfs none bin
# don't mount tmp, it's useful for people to see what it looks like after.
#sudo mount -t tmpfs none tmp
# Don't bother mounting, we need the files later for the initramfs
#sudo mount -t tmpfs none etc
sudo mount -t tmpfs none tcz
sudo mount -t tmpfs none buildbin
sudo mount --bind /dev dev
(GOBIN=`pwd` go install -x cmds/init)
# In case people want tinycore packages, get the .so's for tinycore
PATH=$OLDPATH
set +e
cpio -id -E tinycorebase/filelist < tinycorebase/corepure64.cpio
set -e
# Uncomment this if you want to stop here and look around
#bash
cat /etc/resolv.conf > etc/resolv.conf
# The ultimate fallback.
echo nameserver 8.8.8.8 >> etc/resolv.conf
#
sudo chroot .  /init
set +e
sudo umount ./tmp
sudo umount ./etc
sudo umount ./bin
sudo umount ./tcz
sudo umount ./go
sudo umount ./dev
sudo umount ./proc
sudo umount ./buildbin
sudo umount ./tmp/tcloop/*

# Simple test once the primitive sh starts:
#date
#and watch how it goes.
#
#What happens: 
#finds date in $HOME/u-root/buildbin/date
#symlink to installcommand
#runs installcommand, installs date in $HOME/u-root/bin, 
#installcommand runs the command with arg.
#
#All subsequent invocations of date run the compiled version.
